=pod

=head1 NAME

Net::BitTorrent::Design - Note to self: Stick to this or die!

=head1 Description

Blah. Blah. Blah. Initial design spec. Blah. Middle of the night. Yadda.

=head1 API Specification

My overall goal is to have something like this:

  use Net::BitTorrent;
  my $client = Net::BitTorrent->new(
      port         => [6881..6890],
      on_hash_pass => sub { ... },
      on_hash_fail => sub { ... },
  );
  $client->add_torrent( path => 'a/legal.torrent' );
  $client->run(); # Simple wrapper around AnyEvent->condvar->recv;

...or this...

  use AnyEvent;
  use Net::BitTorrent;
  use Net::BitTorrent::Torrent;
  my $client = Net::BitTorrent->new( );
  my $torrent = Net::BitTorrent::Torrent->new( path => 'a/different.torrent' );
  # ...some sort of UI stuff here, file selection, etc.
  $client->add_torrent( $torrent );
  $torrent->complete->recv;

...or even this...

  use Net::BitTorrent::Torrent;
  my $t = Net::BitTorrent::Torrent->new( path => 'yet/another.torrent' );
  $t->scrape; # Scrape should work even in standalone mode. ...not announce.
  $t->hashcheck;
  printf <<'END', $t->name, $t->infohash, $t->percent_complete, $t->nodes;
  About %s / %s (%3.2f%% complete)
  [...file list or something...]
  The tracker says there are %d possible nodes in this swarm.
   ...
  END

...and yep, even mentally retarded stuff like...

  use Net::BitTorrentX::Storage::DBD::SQLite; # ...why? I blame lead paint.
  use Net::BitTorrent;
  my $client = Net::BitTorrent->new( );
  $client->add_torrent(                                             # Seriously.
      storage => Net::BitTorrentX::Storage::DBD::SQLite->new( ... ),# <- This is
      path    => 'this/is/sparta.torrent'                           # madness.
  );
  $client->run;

...and...

  use AnyEvent;
  use Net::BitTorrent::DHT;
  my $dht = Net::BitTorrent::DHT->new( nodeid => ... );
  $dht->get_peers( $_, \&dht_cb ) for qw[infohash_a infohash_b];
  AnyEvent->condvar->recv; # tick, tick, tick, ding!
  sub dht_cb {
    my ( $infohash, $peers ) = @_;
    printf 'We found %d peers for %s via DHT', scalar( @$peers ), $infohash;
  }

...all work. In other words, anything a nutter-- I mean user may come up with,
Net::BitTorrent should be thin and flexible enough to allow for it.

=head2 Net::BitTorrent

Basic, lightweight class which serves as the main client object and contains
the following attributes:

=over

=item torrents (ArrayRef[Net::BitTorrent::Torrent])

These are strong refs to Net::BitTorrent::Torrent objects.

=item tcp_ipv4 (Object|Glob)

The local TCP socket for IPv4.

=item tcp_ipv6 (Object|Glob)

The local TCP socket for IPv6.

=item udp_ipv4 (Object|Glob)

The local UDP endpoint for IPv4.

=item udp_ipv6 (Object|Glob)

The local UDP endpoint for IPv6.

=item timers (HashRef)

There will probably be a number of client-wide timers (AnyEvent timers,
actually). This is where I'll stick 'em.

=back

=head3 Net::BitTorrent->new( [...] )

Creates a new client object, opening random (matching) ports on both UDP and
TCP for both IPv4 and IPv6. The PeerID and DHT NodeID is generated internally.

=cut

use Net::BitTorrent;
my $client = Net::BitTorrent->new( );

=pod

To modify this default behavior, the following arguments are recognized:

=over

=item C<disable_ipv6>

Disables incoming IPv6 connections for both UDP and TCP.

=item C<disable_ipv4>

Disables incoming IPv4 connections for both UDP and TCP.

=item C<disable_tcp>

Disables incoming TCP connections for both IPv4 and IPv6.

=item C<disable_udp>

Disables incoming UDP connections for both IPv4 and IPv6. Note that this
greatly restricts such things as DHT which require two way communication via
UDP.

=item C<port>

A single integer or a list of integers.

When handed a single port number, failure to open TCP/UDP sockets on this port
results in a non-fatal error.

=cut

use Net::BitTorrent;
my $client = Net::BitTorrent->new( port => 1338 );
print $client->port; # Should print 1338 if the port was open sucessfully.

=pod

When handed a list of port numbers, each is attempted in order until we can
open all sockets (TCP and UDP on both IPv4 and IPv6 if enabled) on this single
port number. If we exhaust the list without opening a port, a non-fatal error
is thrown.

=cut

use Net::BitTorrent;
my $client = Net::BitTorrent->new( port => [6834, 9517, 12589 ... 36587] );
print $client->port;

=pod

=back

If both C<disable_ipv4> and C<disable_ipv6> or both C<disable_tcp> and
C<disable_udp> are defined and true, a non-fatal error is thrown.

=head2 Net::BitTorrent::Torrent

Net::BitTorrent::Torrent is the base class for all .torrent-related objects.
If no arguments are passed to the constructor, metadata for a new .torrent
will be generated. Otherwise, this simple base contains the following data:

=over

=item C<path> or C<infohash>

The constructor requires either one of these:

=over

=item C<path>

This is the actual filename of the .torrent file you would like to load. This
file is slurped and the metadata it contains is parsed out on construction.

=item C<infohash>

As an alternative to the C<path> attribute, you may pass an infohash for a
swarm you would like to join. This will require support for BEP09 and BEP05
(or should I allow a tracker to be added?). After the metadata is retrieved
from the swarm, it will be stored as C<{save_path}/{infohash}.torrent>.

=back

=item C<storage>

This optional argument expects a C<Net::BitTorrent::Storage> object (or
subclass). This allows

=back

=head3 Net::BitTorrent::Torrent->new( path => 'some.torrent' )

A .torrent can be loaded without a parent client object for information
gathering. Data will be expected to be in the current working directory when
the object was created.

=cut

use Net::BitTorrent::Torrent;
my $torrent = Net::BitTorrent::Torrent->new( path => 'some.torrent' );

=head3 Net::BitTorrent::Torrent->new( path => ..., base_dir => 'q:\storage' )

Loads a .torrent which looks for data to be in the C<q:\storage> directory.

=cut

use Net::BitTorrent::Torrent;
my $torrent = Net::BitTorrent::Torrent->new(
    path     => 'some.torrent',
    base_dir => 'X:\BitTorrent\incoming'
);

=head3 Net::BitTorrent::Torrent->status( )



=cut





=pod

=head2 Net::BitTorrent::Torrent::Factory

This class initially contains no files, trackers, or any other metadata.

=cut

use Net::BitTorrent::Torrent;
my $torrent = Net::BitTorrent::Torrent->new( );

$torrent->files( 'FileB.ext', 'FileC.ext' );
$torrent->add_file( 'FileA.ext' );
$torrent->add_trackers( );
open my ($FH), '>', 'some.torrent';
syswrite($FH, $torrent->metadata); # Write the new .torrent to disk
close $FH;

=pod

This class will be coerce-able into a full fledged Net::BitTorrent::Torrent
object.

=cut

use Net::BitTorrent;
use Net::BitTorrent::Torrent::Factory;

my $new_torrent = Net::BitTorrent::Torrent::Factory->new( );
# ... Add files, etc.
my $client = Net::BitTorrent->new( );
$client->add_torrent( $new_torrent ); # Metadata is loaded into new object

=pod

=head3 Net::BitTorrent::Torrent::Factory->new( [...] )

This constructor accepts the following arguments (all of which are optional):

=over

=item C<name>

The name used by the torrent.

=cut

use Net::BitTorrent::Torrent::Factory;
my $torrent = Net::BitTorrent::Torrent::Factory->new(
    name => 'GNUBuntu 10.6-x64'
);

=pod

=item C<files>

List of filenames. These files must exist for metadata generation.

=cut

use Net::BitTorrent::Torrent::Factory;
my $torrent = Net::BitTorrent::Torrent::Factory->new(
    files => [
        'some/random/file.txt', 'README', $0
    ]
);

=pod

=item C<trackers>

List of list of URLs.

=cut

use Net::BitTorrent::Torrent::Factory;
my $torrent = Net::BitTorrent::Torrent::Factory->new(
    trackers => [
        [
            'http://perlishtracker.pl/announce.pl'
        ],
        [
            'http://tracker.prq.to/announce',
            'http://tracker.openbittorrent.com/announce',
            'http://tracker.publicbt.com/announce',
            'http://btfans.3322.org:8000/announce',
            'http://tracker.ktxp.com:6868/announce',
            'http://tracker.ktxp.com:7070/announce',
            'http://tracker.levelup.cn:8080/announce',
        ]
    ]
);

=pod

=item C<private>

Bool value.

=cut

use Net::BitTorrent::Torrent::Factory;
my $torrent = Net::BitTorrent::Torrent::Factory->new(
    private => !'Anit-DRM'
);

=pod

=item C<piece_size>

Integer.

=cut

use Net::BitTorrent::Torrent::Factory;
my $torrent = Net::BitTorrent::Torrent::Factory->new(
    piece_size => 1024 * 32
);

=pod

=item C<storage>

Net::BitTorrent::Storage object.

=cut

use Net::BitTorrentX::Storage::DBI; # Some crazy database-based storage scheme
use Net::BitTorrent::Torrent::Factory;
my $torrent = Net::BitTorrent::Torrent::Factory->new(
    storage => Net::BitTorrentX::Storage::DBI->new( ... )
);

=pod

=back

=head3 Net::BitTorrent::Torrent::Factory->files( )

Returns the list of currently loaded files.

=head3 Net::BitTorrent::Torrent::Factory->set_files( ... )

Expects a list of filenames which are added in the order they were passed.
This method clears the current list of files first. Duplicate files are only
added once (when first seen).

=cut

use Net::BitTorrent::Torrent;
my $torrent = Net::BitTorrent::Torrent->new( );
$torrent->set_files( qw[file_a.txt file_b.txt file_c.txt] );
print join ', ', $torrent->files( );    # file_a.txt, file_b.txt, file_c.txt
$torrent->set_files( qw[file_d.txt file_e.txt] );
print join ', ', $torrent->files( );    # file_d.txt, file_e.txt

=pod

=head3 Net::BitTorrent::Torrent::Factory->add_files( ... )

Pushes a single file to the end of the list. Files already in the list are not
added a second time.

=cut

use Net::BitTorrent::Torrent;
my $torrent = Net::BitTorrent::Torrent->new( );
$torrent->set_files( qw[vid_a.avi vid_b.avi] );
$torrent->add_file( 'vid_c.mpeg' );
print join ', ', $torrent->files( );    # vid_a.avi, vid_b.avi, vid_c.mpeg

=pod

=head3 Net::BitTorrent::Torrent::Factory->trackers( )

Returns the list of current torrent tiers. This is actually a list of lists.

=head3 Net::BitTorrent::Torrent::Factory->add_tracker( ... )

Pushes a tier of trackers onto the stack. This method expects a list of URLs.

=cut

use Net::BitTorrent::Torrent;
use Data::Dump;

my $torrent = Net::BitTorrent::Torrent->new( );
$torrent->add_tracker('http://publictracker.com/not/real/announce.pl');
$torrent->add_tracker(qw[http://sometracker.com/announce.pl
                         udp://othertracker.com/announce.php]);
ddx $torrent->trackers( ); # prints...
# [
#   [ 'http://publictracker.com/not/real/announce.pl' ],
#   [
#     'http://sometracker.com/announce.pl',
#     'udp://othertracker.com/announce.php'
#   ]
# ]

=pod

=head2 Net::BitTorrent::Storage

This object is passed or created by a Net::BitTorrent::Torrent object to
interface with the local filesystem.

=head3 Net::BitTorrent::Storage->new( allocation_mode => ... )

Expected parameters for the constructor include:

=over

=item C<allocation_mode>

There are three modes in which storage (files on disk) are allocated in
Net::BitTorrent.

=over

=item * The traditional C<full> allocation mode. Net::BitTorrent uses
C<truncate> to allocate pieces which means that on NTFS with file compression
turned on, full allocation mode will only allocate storage for the downloaded
pieces. On other filesystems, entire files are filled up with zeros before
anything is downloaded.

=item * The C<compact> allocation mode, where only files are allocated for
actual pieces that have been downloaded.

=item * The C<sparse> allocation, sparse files are used, and pieces are
downloaded directly to where they belong.

=back

=back

=head2 Net::BitTorrent::Storage::Mode::Sparse [Role]

On filesystems which support sparse files, this allocation mode will only use
as much space as has been downloaded. It does not require an allocation pass
on startup.

=head2 Net::BitTorrent::Storage::Mode::Full [Role]

In full allocation mode, files are C<truncate>d to the correct size and null
filled. This is the simplest form of allocation and the default but comes with
the following drawbacks:

=over

=item * Allocating new files may take a while depending on their size since the
entire file will need to be null filled.

=item * Disk caches usually perform extreamly poorly with random access to large
files and may slow down a download session considerably.

=back

Benefits of this mode include:

=over

=item * Downloaded pieces are written directly to their final place in the files
and the total number of disk operations will be fewer and may also play nicer
to filesystems' file allocation. Fragmentation may also be less of a problem.

=item * No risk of a download failing because of a full disk during download.
...unless sparse or compressed files are being used.

=back

=head2 Net::BitTorrentX::Storage::Mode::Compact [Role]

Compact allocation only allocates as much storage as it needs to keep the
pieces downloaded so far. This means that pieces will be moved around to be
placed at their final position in the files after downloading is complete.

This role will probably not be included in the distribution.

=cut

=head1 Silly ASCII Art

A step above calculator humor.

=head2 Possible Client <-> Torrent <-> Tracker Relationship

I banged my head on something hard and this popped out:

       .-----.-----.-----.------[client]-----------------------------.
      |      |     |     |         |                                 |
      |      |     |     |         |                                 |
      |      |     |     |         |                                 |
      |    [url] [url] [url]   [torrent]                             |
      |      |     |     |                                           |
      |      |     |     |                                           |
      |      |     |     |                                           |
      |      `---------------[tier]--------------------------------. |
      |                         |                                  | |
      |`----.-----.-----.       |                              [torrent]
      |     |     |     |       |                                  |
      |     |     |     |       |                                  |
    [url] [url] [url] [url]-----'                                  |
      |     |     |     |                                          |
      |     |     |     |                                          |
      |     |     |     |                                          |
       `---------------[tier]--------------------------------------'

If each url in a tier of trackers is linked to the parent client, I can avoid
creating duplicate objects for shared urls and enable multi-infohash scrapes.

=head1 Remnants

This is where I'll toss things which are currently disconnected but may be
important later.

=over

=item L<Sys::Sendfile>

=back

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

=head1 License and Legal

Copyright (C) 2008-2010 by Sanko Robinson <sanko@cpan.org>

This program is free software; you can redistribute it and/or modify it under
the terms of
L<The Artistic License 2.0|http://www.perlfoundation.org/artistic_license_2_0>.
See the F<LICENSE> file included with this distribution or
L<notes on the Artistic License 2.0|http://www.perlfoundation.org/artistic_2_0_notes>
for clarification.

When separated from the distribution, all original POD documentation is
covered by the
L<Creative Commons Attribution-Share Alike 3.0 License|http://creativecommons.org/licenses/by-sa/3.0/us/legalcode>.
See the
L<clarification of the CCA-SA3.0|http://creativecommons.org/licenses/by-sa/3.0/us/>.

Neither this module nor the L<Author|/Author> is affiliated with BitTorrent,
Inc.

=for rcs $Id$

=cut
